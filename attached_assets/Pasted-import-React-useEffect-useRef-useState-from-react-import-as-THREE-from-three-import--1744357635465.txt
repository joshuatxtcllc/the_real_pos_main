import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { frameStyles } from '../data/frameStyles';
import { matColors } from '../data/matColors';
import '../styles/FrameVisualizer.css';

/**
 * FrameVisualizer Component
 * 
 * Core component for the virtual framing application that renders
 * the artwork with selected frame and mat options using Three.js
 */
const FrameVisualizer = ({ 
  artwork, 
  selectedFrame, 
  matConfig,
  dimensions,
  onRender
}) => {
  const mountRef = useRef(null);
  const sceneRef = useRef(null);
  const rendererRef = useRef(null);
  const cameraRef = useRef(null);
  const frameRef = useRef(null);
  const artworkRef = useRef(null);
  const matRef = useRef(null);
  
  const [isLoading, setIsLoading] = useState(true);
  const [renderedImage, setRenderedImage] = useState(null);

  // Initialize Three.js scene
  useEffect(() => {
    if (!mountRef.current) return;
    
    // Create scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf0f0f0);
    sceneRef.current = scene;
    
    // Create camera
    const camera = new THREE.PerspectiveCamera(
      50, 
      mountRef.current.clientWidth / mountRef.current.clientHeight, 
      0.1, 
      1000
    );
    camera.position.z = 5;
    cameraRef.current = camera;
    
    // Create renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    mountRef.current.appendChild(renderer.domElement);
    rendererRef.current = renderer;
    
    // Add controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.enableZoom = true;
    controls.minDistance = 3;
    controls.maxDistance = 10;
    controls.enablePan = false;
    
    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1);
    scene.add(directionalLight);
    
    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    
    animate();
    
    // Handle resize
    const handleResize = () => {
      if (!mountRef.current) return;
      
      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    };
    
    window.addEventListener('resize', handleResize);
    
    return () => {
      if (mountRef.current && renderer.domElement) {
        mountRef.current.removeChild(renderer.domElement);
      }
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  // Load and update artwork
  useEffect(() => {
    if (!sceneRef.current || !artwork) return;
    
    setIsLoading(true);
    
    // Remove previous artwork if exists
    if (artworkRef.current) {
      sceneRef.current.remove(artworkRef.current);
      artworkRef.current = null;
    }
    
    // Load artwork texture
    const textureLoader = new THREE.TextureLoader();
    textureLoader.load(
      artwork,
      (texture) => {
        const aspectRatio = texture.image.width / texture.image.height;
        
        // Create artwork plane
        const width = dimensions.width / 100; // Convert to meters
        const height = width / aspectRatio;
        
        const geometry = new THREE.PlaneGeometry(width, height);
        const material = new THREE.MeshBasicMaterial({ map: texture });
        const artwork = new THREE.Mesh(geometry, material);
        
        sceneRef.current.add(artwork);
        artworkRef.current = artwork;
        
        updateFrame();
        updateMat();
        setIsLoading(false);
        
        // Capture rendered image
        setTimeout(() => {
          const dataURL = rendererRef.current.domElement.toDataURL('image/png');
          setRenderedImage(dataURL);
          if (onRender) onRender(dataURL);
        }, 500);
      },
      undefined,
      (error) => {
        console.error('Error loading artwork:', error);
        setIsLoading(false);
      }
    );
  }, [artwork, dimensions]);

  // Update frame when selection changes
  const updateFrame = () => {
    if (!sceneRef.current || !artworkRef.current || !selectedFrame) return;
    
    // Remove previous frame if exists
    if (frameRef.current) {
      sceneRef.current.remove(frameRef.current);
      frameRef.current = null;
    }
    
    const frameStyle = frameStyles.find(f => f.id === selectedFrame);
    if (!frameStyle) return;
    
    const artworkWidth = artworkRef.current.geometry.parameters.width;
    const artworkHeight = artworkRef.current.geometry.parameters.height;
    
    // Calculate frame dimensions
    const frameThickness = 0.05; // 5cm thickness
    const frameWidth = artworkWidth + frameThickness * 2;
    const frameHeight = artworkHeight + frameThickness * 2;
    const frameDepth = 0.03; // 3cm depth
    
    // Create frame texture
    const textureLoader = new THREE.TextureLoader();
    textureLoader.load(
      frameStyle.textureUrl,
      (texture) => {
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        
        // Create frame geometry
        const frame = new THREE.Group();
        
        // Create frame sides
        const materials = [
          new THREE.MeshStandardMaterial({ map: texture }), // right
          new THREE.MeshStandardMaterial({ map: texture }), // left
          new THREE.MeshStandardMaterial({ map: texture }), // top
          new THREE.MeshStandardMaterial({ map: texture }), // bottom
          new THREE.MeshStandardMaterial({ map: texture }), // back
          new THREE.MeshStandardMaterial({ map: texture })  // front
        ];
        
        // Top bar
        const topGeometry = new THREE.BoxGeometry(frameWidth, frameThickness, frameDepth);
        const topMesh = new THREE.Mesh(topGeometry, materials);
        topMesh.position.y = artworkHeight / 2 + frameThickness / 2;
        topMesh.position.z = -frameDepth / 2;
        frame.add(topMesh);
        
        // Bottom bar
        const bottomGeometry = new THREE.BoxGeometry(frameWidth, frameThickness, frameDepth);
        const bottomMesh = new THREE.Mesh(bottomGeometry, materials);
        bottomMesh.position.y = -artworkHeight / 2 - frameThickness / 2;
        bottomMesh.position.z = -frameDepth / 2;
        frame.add(bottomMesh);
        
        // Left bar
        const leftGeometry = new THREE.BoxGeometry(frameThickness, frameHeight - frameThickness * 2, frameDepth);
        const leftMesh = new THREE.Mesh(leftGeometry, materials);
        leftMesh.position.x = -artworkWidth / 2 - frameThickness / 2;
        leftMesh.position.z = -frameDepth / 2;
        frame.add(leftMesh);
        
        // Right bar
        const rightGeometry = new THREE.BoxGeometry(frameThickness, frameHeight - frameThickness * 2, frameDepth);
        const rightMesh = new THREE.Mesh(rightGeometry, materials);
        rightMesh.position.x = artworkWidth / 2 + frameThickness / 2;
        rightMesh.position.z = -frameDepth / 2;
        frame.add(rightMesh);
        
        sceneRef.current.add(frame);
        frameRef.current = frame;
        
        // Adjust camera to frame the entire composition
        const fieldOfViewRadians = cameraRef.current.fov * (Math.PI / 180);
        const height = Math.max(frameHeight, frameWidth) * 1.2; // Add 20% margin
        const distance = height / (2 * Math.tan(fieldOfViewRadians / 2));
        cameraRef.current.position.z = distance;
        cameraRef.current.lookAt(0, 0, 0);
      }
    );
  };
  
  // Update mat when configuration changes
  const updateMat = () => {
    if (!sceneRef.current || !artworkRef.current || !matConfig) return;
    
    // Remove previous mat if exists
    if (matRef.current) {
      sceneRef.current.remove(matRef.current);
      matRef.current = null;
    }
    
    if (!matConfig.enabled) return;
    
    const artworkWidth = artworkRef.current.geometry.parameters.width;
    const artworkHeight = artworkRef.current.geometry.parameters.height;
    
    // Calculate mat dimensions
    const matTopWidth = matConfig.topWidth / 100; // Convert to meters
    const matBottomWidth = matConfig.bottomWidth / 100;
    const matLeftWidth = matConfig.leftWidth / 100;
    const matRightWidth = matConfig.rightWidth / 100;
    
    const matWidth = artworkWidth + matLeftWidth + matRightWidth;
    const matHeight = artworkHeight + matTopWidth + matBottomWidth;
    
    // Get mat color
    const matColor = new THREE.Color(matConfig.color);
    
    // Create mat geometry
    const matGeometry = new THREE.PlaneGeometry(matWidth, matHeight);
    const matMaterial = new THREE.MeshBasicMaterial({ color: matColor });
    const mat = new THREE.Mesh(matGeometry, matMaterial);
    
    // Position mat behind artwork
    mat.position.z = -0.001;
    
    // Calculate offset if mat widths are asymmetrical
    const xOffset = (matRightWidth - matLeftWidth) / 2;
    const yOffset = (matTopWidth - matBottomWidth) / 2;
    mat.position.x = xOffset;
    mat.position.y = yOffset;
    
    sceneRef.current.add(mat);
    matRef.current = mat;
    
    // Reposition artwork
    artworkRef.current.position.x = xOffset;
    artworkRef.current.position.y = yOffset;
  };
  
  // Update frame when selection changes
  useEffect(() => {
    if (sceneRef.current && artworkRef.current) {
      updateFrame();
    }
  }, [selectedFrame]);
  
  // Update mat when configuration changes
  useEffect(() => {
    if (sceneRef.current && artworkRef.current) {
      updateMat();
    }
  }, [matConfig]);
  
  return (
    <div className="frame-visualizer">
      <div className="visualizer-container" ref={mountRef}>
        {isLoading && (
          <div className="loading-indicator">
            <div className="spinner"></div>
            <p>Loading visualization...</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default FrameVisualizer;