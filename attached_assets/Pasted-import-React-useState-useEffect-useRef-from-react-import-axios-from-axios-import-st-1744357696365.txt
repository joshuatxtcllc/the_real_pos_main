import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import '../styles/ChatbotWidget.css';

/**
 * ChatbotWidget Component
 * 
 * Floating chatbot interface for order status inquiries
 * that connects to the AI-powered backend service
 */
const ChatbotWidget = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [context, setContext] = useState({});
  const messagesEndRef = useRef(null);
  
  // Add initial welcome message
  useEffect(() => {
    setMessages([
      {
        text: "ðŸ‘‹ Hi there! I'm your framing assistant. I can help you check your order status, answer questions about framing, or help you with your design. How can I assist you today?",
        sender: 'bot',
        timestamp: new Date()
      }
    ]);
  }, []);

  // Auto-scroll to bottom of messages
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Toggle chatbot open/closed
  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  // Handle input changes
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    // Add user message to chat
    const userMessage = {
      text: input,
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages(prevMessages => [...prevMessages, userMessage]);
    setInput('');
    setIsTyping(true);
    
    try {
      // Send message to chatbot API
      const response = await axios.post('/api/chatbot', {
        message: input,
        context: context
      });
      
      // Add short delay to simulate typing
      setTimeout(() => {
        // Add bot response to chat
        const botMessage = {
          text: response.data.text,
          sender: 'bot',
          timestamp: new Date()
        };
        
        setMessages(prevMessages => [...prevMessages, botMessage]);
        setContext(response.data.context);
        setIsTyping(false);
      }, 500 + Math.random() * 1000);
    } catch (error) {
      console.error('Error communicating with chatbot:', error);
      
      // Add error message
      const errorMessage = {
        text: "I'm sorry, I'm having trouble connecting to our system right now. Please try again later or contact customer service for immediate assistance.",
        sender: 'bot',
        timestamp: new Date(),
        isError: true
      };
      
      setMessages(prevMessages => [...prevMessages, errorMessage]);
      setIsTyping(false);
    }
  };

  // Format timestamp
  const formatTime = (timestamp) => {
    return new Intl.DateTimeFormat('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    }).format(timestamp);
  };

  // Quick action buttons
  const quickActions = [
    { text: 'Check order status', action: 'What is the status of my order?' },
    { text: 'Track shipment', action: 'Where is my order?' },
    { text: 'View order details', action: 'Show me my order details' }
  ];

  // Handle quick action click
  const handleQuickAction = (action) => {
    setInput(action);
    // Use setTimeout to ensure the input is updated before submit
    setTimeout(() => {
      const form = document.getElementById('chatbot-form');
      if (form) form.dispatchEvent(new Event('submit', { cancelable: true }));
    }, 10);
  };

  return (
    <div className="chatbot-container">
      {/* Chatbot toggle button */}
      <button 
        className={`chatbot-toggle ${isOpen ? 'open' : ''}`}
        onClick={toggleChat}
        aria-label={isOpen ? 'Close chat' : 'Open chat'}
      >
        {isOpen ? (
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        ) : (
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
          </svg>
        )}
      </button>
      
      {/* Chatbot panel */}
      <div className={`chatbot-panel ${isOpen ? 'open' : ''}`}>
        {/* Chatbot header */}
        <div className="chatbot-header">
          <div className="chatbot-title">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="chatbot-icon">
              <circle cx="12" cy="12" r="10"></circle>
              <path d="M12 16v-4"></path>
              <path d="M12 8h.01"></path>
            </svg>
            <h3>Order Status Assistant</h3>
          </div>
          <button 
            className="chatbot-close"
            onClick={toggleChat}
            aria-label="Close chat"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        
        {/* Chatbot messages */}
        <div className="chatbot-messages">
          {messages.map((message, index) => (
            <div 
              key={index} 
              className={`message ${message.